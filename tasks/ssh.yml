---
# Todo:
# 1- multi count issue, should loop if not one 2 one mappining
#- fail: msg="ssh port to connect to _{{ aws_ec2_ssh_port }}_"

- name: ssh | Set default connection port if not set
  set_fact: 
    aws_ec2_connection_port : "{{ aws_ec2_connection_port_default }}"
  when: aws_ec2_connection_port == "" 

- name: ssh | Set public and Private IP facts from AWS
  set_fact:
    aws_public_ip: "{{ ec2_server.tagged_instances[0].public_ip  | default(false) }}"
    aws_private_ip: "{{ ec2_server.tagged_instances[0].private_ip | default(false) }}"

- name: ssh | 1. Waiting for ssh port to open aws_ec2_connection_host
  wait_for:
    port="{{ aws_ec2_connection_port }}"
    host="{{ aws_ec2_connection_host }}"
    delay="{{ aws_ec2_connection_delay }}"
    timeout="{{ aws_ec2_connection_timeout_misc }}"
  register: ansible_ssh_1_working
  ignore_errors: yes
  when: aws_ec2_connection_host is defined and aws_ec2_connection_host != "" 

- name: ssh | 1. Set ansible ssh host condition failed or skipped
  set_fact: 
     ansible_ssh_host_failed : True
  when: ansible_ssh_1_working | skipped or ansible_ssh_1_working | failed

- name: ssh | Resolve FQDN of inventory_hostname
  set_fact:
    fqdn_resolved: "{{ lookup('dig', inventory_hostname) }}"
  when: aws_ec2_check_negative_cache and ansible_ssh_host_failed

- name: ssh | Check for negative caching for the FQDN
  set_fact:
    aws_ec2_negative_cache_problem : true
  when: ansible_ssh_host_failed and aws_ec2_check_negative_cache and  aws_public_ip != fqdn_resolved and aws_private_ip != fqdn_resolved

- name: ssh | 2. Wait for ssh port to open on FQDN "inventory_hostname"
  wait_for:
    port="{{ aws_ec2_connection_port }}"
    host="{{ inventory_hostname }}"
    delay="{{ aws_ec2_connection_delay }}"
    timeout="{{ aws_ec2_connection_timeout_misc }}"
    search_regex="{{ aws_ec2_connection_string | default(omit) }}"
  register: fqdn_2_working
  ignore_errors: yes
  when: ansible_ssh_host_failed and not aws_ec2_negative_cache_problem

- name: ssh | 2. Set FQDN condition failed or skipped
  set_fact: 
    ansible_fqdn_failed: True
  when: ansible_ssh_host_failed and fqdn_2_working | skipped or fqdn_2_working | failed

# At this point lets start falling back to defaults
- name: ssh | (Fallback) Set ansible_ssh_user to default
  set_fact:
      ansible_ssh_user : "{{ aws_ec2_default_user }}"
      ansible_user     : "{{ aws_ec2_default_user }}"
  when: ansible_fqdn_failed and ansible_ssh_host_failed

- name: ssh | 3. Set aws_ec2_connection_host to AWS Private_IP for initial communication (to avoid DNS delay)
  set_fact:
    ansible_ssh_host : "{{ aws_private_ip }}"
    ansible_host     : "{{ aws_private_ip }}"
  when: ansible_ssh_host_failed and ansible_fqdn_failed and aws_ec2_connection_wait_private

- name: ssh | 3. Wait for ssh port to open on ec2 private ip
  wait_for:
    port="{{ aws_ec2_connection_port }}"
    host="{{ aws_ec2_connection_host }}"
    delay="{{ aws_ec2_connection_delay }}"
    timeout="{{ aws_ec2_connection_timeout }}"
    search_regex="{{ aws_ec2_connection_string | default(omit) }}"
  register: private_ip_3_working
  ignore_errors: yes
  when: ansible_ssh_host_failed and ansible_fqdn_failed and aws_ec2_connection_wait_private

- name: ssh | 3. Set private ip condition
  set_fact: 
    ansible_private_failed: True
  when:  ansible_fqdn_failed and ansible_ssh_host_failed and ( private_ip_3_working | failed or private_ip_3_working| skipped )

- name: ssh | 4. Set aws_ec2_connection_host to Public IP for initial communication (to avoid DNS delay)
  set_fact:
    ansible_ssh_host: "{{ aws_public_ip }}"
  when: ansible_ssh_host_failed and ansible_fqdn_failed and ansible_private_failed and aws_ec2_connection_wait_public

- debug: msg="{{ ansible_ssh_host_failed }} {{ ansible_fqdn_failed}} {{ ansible_private_failed}} {{ aws_ec2_connection_wait_public}} "

# If we reach this point and unable to connect than it will fail
- name: ssh | 4. Wait for ssh port to open on ec2 public IP
  wait_for:
    port="{{ aws_ec2_connection_port }}"
    host="{{ aws_ec2_connection_host }}"
    delay="{{ aws_ec2_connection_delay }}"
    timeout="{{ aws_ec2_connection_timeout }}"
    search_regex="{{ aws_ec2_connection_string | default(omit) }}"
  register: public_ip_4_working
  when: ansible_ssh_host_failed and ansible_fqdn_failed and ansible_private_failed and aws_ec2_connection_wait_public

- name: ssh | 4. Set public ip condition
  set_fact: 
    ansible_public_failed: True
  when: ansible_ssh_host_failed and ansible_fqdn_failed and ansible_private_failed and ( public_ip_4_working | failed or public_ip_4_working | skipped)
